{
  "properties": {
    "doc.Database-action": "# Database Action\n\n\nDescription\n-----------\nAction that runs a database command.\n\n\nUse Case\n--------\nThe action can be used whenever you want to run a database command before or after a data pipeline.\nFor example, you may want to run a sql update command on a database before the pipeline source pulls data from tables.\n\n\nProperties\n----------\n**Plugin Name:** Name of the JDBC plugin to use. This is the value of the 'name' key\ndefined in the JSON file for the JDBC plugin.\n\n**Plugin Type:** Type of the JDBC plugin to use. This is the value of the 'type' key\ndefined in the JSON file for the JDBC plugin. Defaults to 'jdbc'.\n\n**Database Command:** The database command to execute.\n\n**Connection String:** JDBC connection string including database name.\n\n**Username:** User identity for connecting to the specified database. Required for databases that need\nauthentication. Optional for databases that do not require authentication.\n\n**Password:** Password to use to connect to the specified database. Required for databases\nthat need authentication. Optional for databases that do not require authentication.\n\n**Connection Arguments:** A list of arbitrary string tag/value pairs as connection arguments. These arguments\nwill be passed to the JDBC driver, as connection arguments, for JDBC drivers that may need additional configurations.\nThis is a semicolon-separated list of key-value pairs, where each pair is separated by a equals '=' and specifies\nthe key and value for the argument. For example, 'key1=value1;key2=value' specifies that the connection will be\ngiven arguments 'key1' mapped to 'value1' and the argument 'key2' mapped to 'value2'. (Macro-enabled)\n\n**Enable Auto-Commit:** Whether to enable auto-commit for queries run by this source. Defaults to 'false'.\nNormally this setting does not matter. It only matters if you are using a jdbc driver -- like the Hive\ndriver -- that will error when the commit operation is run, or a driver that will error when auto-commit is\nset to false. For drivers like those, you will need to set this to 'true'.\n\n\nExample\n-------\nThis example connects to a database using the specified 'connectionString', which means\nit will connect to the 'prod' database of a PostgreSQL instance running on 'localhost'.\nIt will run an update command to set the price of record with ID 6 to 20.\n\n    {\n        \"name\": \"Database\",\n        \"plugin\": {\n            \"name\": \"Database\",\n            \"type\": \"action\",\n            \"properties\": {\n                \"query\": \"UPDATE table_name SET price = 20 WHERE ID = 6\",\n                \"connectionString\": \"jdbc:postgresql://localhost:5432/prod\",\n                \"user\": \"user123\",\n                \"password\": \"password-abc\",\n                \"jdbcPluginName\": \"postgres\",\n                \"jdbcPluginType\": \"jdbc\"\n            }\n        }\n    }\n",
    "widgets.Database-action": "{\n  \"metadata\": {\"spec-version\": \"1.5\"},\n  \"configuration-groups\": [\n    {\n      \"label\": \"Basic\",\n      \"properties\": [\n        {\n          \"widget-type\": \"textbox\",\n          \"name\": \"jdbcPluginName\",\n          \"label\": \"Plugin Name\"\n        },\n        {\n          \"widget-type\": \"textbox\",\n          \"name\": \"jdbcPluginType\",\n          \"label\": \"Plugin Type\",\n          \"widget-attributes\": {\"default\": \"jdbc\"}\n        },\n        {\n          \"widget-type\": \"textbox\",\n          \"name\": \"connectionString\",\n          \"label\": \"Connection String\"\n        },\n        {\n          \"widget-type\": \"textarea\",\n          \"name\": \"query\",\n          \"label\": \"Database Command\"\n        }\n      ]\n    },\n    {\n      \"label\": \"Credentials\",\n      \"properties\": [\n        {\n          \"widget-type\": \"textbox\",\n          \"name\": \"user\",\n          \"label\": \"Username\"\n        },\n        {\n          \"widget-type\": \"password\",\n          \"name\": \"password\",\n          \"label\": \"Password\"\n        }\n      ]\n    },\n    {\n      \"label\": \"Advanced\",\n      \"properties\": [\n        {\n          \"widget-type\": \"keyvalue\",\n          \"name\": \"connectionArguments\",\n          \"label\": \"Connection Arguments\",\n          \"widget-attributes\": {\n            \"kv-delimiter\": \"=\",\n            \"key-placeholder\": \"Key\",\n            \"value-placeholder\": \"Value\",\n            \"delimiter\": \";\",\n            \"showDelimiter\": \"false\"\n          }\n        },\n        {\n          \"widget-type\": \"radio-group\",\n          \"name\": \"enableAutoCommit\",\n          \"label\": \"Enable Auto-Commit\",\n          \"widget-attributes\": {\n            \"layout\": \"inline\",\n            \"default\": \"false\",\n            \"options\": [\n              {\n                \"id\": \"true\",\n                \"label\": \"True\"\n              },\n              {\n                \"id\": \"false\",\n                \"label\": \"False\"\n              }\n            ]\n          }\n        }\n      ]\n    }\n  ],\n  \"display-name\": \"Database\"\n}",
    "doc.Database-connector": "# Database Connection\n\n\nDescription\n-----------\nUse this connection to access data in a relational database using JDBC. \nThis is a generic database connection that might not handle some special cases \nfor certain special databases that have a specific implementation of JDBC. \nTry to use those specific database connections \n(for example, MySQL, Oracle, Postgres, and SQL Server connections) if they exist.\n\n\n\nProperties\n----------\n**Name:** Name of the connection. Connection names must be unique in a namespace.\n\n**Description:** Description of the connection.\n\n**JDBC Driver name:** Select the JDBC driver to use.\n\n**Connection String:** JDBC connection string including database name.\n\n**Username:** User identity for connecting to the specified database. Required for databases that need\nauthentication. Optional for databases that do not require authentication.\n\n**Password:** Password to use to connect to the specified database. Required for databases\nthat need authentication. Optional for databases that do not require authentication.\n\n**Connection Arguments:** A list of arbitrary string tag/value pairs as connection arguments. These arguments\nwill be passed to the JDBC driver, as connection arguments, for JDBC drivers that may need additional configurations.\nThis is a semicolon-separated list of key-value pairs, where each pair is separated by a equals '=' and specifies\nthe key and value for the argument. For example, 'key1=value1;key2=value' specifies that the connection will be\ngiven arguments 'key1' mapped to 'value1' and the argument 'key2' mapped to 'value2'.\n\nPath of the connection\n----------------------\nTo browse, get a sample from, or get the specification for this connection through\n[Pipeline Microservices](https://cdap.atlassian.net/wiki/spaces/DOCS/pages/975929350/Pipeline+Microservices), the `path`\nproperty is required in the request body. It can be in the following form :\n\n1. `/{schema}/{table}`\n   This path indicates a table. A table is the only one that can be sampled. Browse on this path to return the specified table.\n   If a database doesn't support `schema` (e.g. MySQL), you can omit the `/{schema}` part.\n\n2. `/{schema}`\n   This path indicates a schema. A schema cannot be sampled. Browse on this path to get all the tables under this schema.\n   Such path is only valid for those databases that support `schema`.\n   \n3. `/`\n   This path indicates the root. A root cannot be sampled. Browse on this path to get all the schemas visible through this connection.\n   If a database doesn't support `schema` (e.g. MySQL), browse on this path will get all the tables visible through this connection.",
    "widgets.Database-connector": "{\n  \"outputs\": [],\n  \"metadata\": {\"spec-version\": \"1.0\"},\n  \"configuration-groups\": [\n    {\n      \"label\": \"Basic\",\n      \"properties\": [\n        {\n          \"widget-type\": \"plugin-list\",\n          \"name\": \"jdbcPluginName\",\n          \"label\": \"JDBC Driver name\",\n          \"widget-attributes\": {\"plugin-type\": \"jdbc\"}\n        },\n        {\n          \"widget-type\": \"textbox\",\n          \"name\": \"connectionString\",\n          \"label\": \"Connection String\"\n        }\n      ]\n    },\n    {\n      \"label\": \"Credentials\",\n      \"properties\": [\n        {\n          \"widget-type\": \"textbox\",\n          \"name\": \"user\",\n          \"label\": \"Username\"\n        },\n        {\n          \"widget-type\": \"password\",\n          \"name\": \"password\",\n          \"label\": \"Password\"\n        }\n      ]\n    },\n    {\n      \"label\": \"Advanced\",\n      \"properties\": [{\n        \"widget-type\": \"keyvalue\",\n        \"name\": \"connectionArguments\",\n        \"label\": \"Connection Arguments\",\n        \"widget-attributes\": {\n          \"kv-delimiter\": \"=\",\n          \"key-placeholder\": \"Key\",\n          \"value-placeholder\": \"Value\",\n          \"delimiter\": \";\",\n          \"showDelimiter\": \"false\"\n        }\n      }]\n    }\n  ],\n  \"display-name\": \"Database\"\n}",
    "doc.Database-batchsource": "# Database Batch Source\n\n\nDescription\n-----------\nReads from a database using a configurable SQL query.\nOutputs one record for each row returned by the query.\n\n\nUse Case\n--------\nThe source is used whenever you need to read from a database. For example, you may want\nto create daily snapshots of a database table by using this source and writing to\na TimePartitionedFileSet.\n\n\nProperties\n----------\n\n**Use Connection** Whether to use a connection. If a connection is used, you do not need to provide the credentials.\n\n**Connection** Name of the connection to use. Project and service account information will be provided by the connection.\nYou also can use the macro function ${conn(connection-name)}.\n\n**JDBC Driver name:** Select the JDBC driver to use.\n\n**Connection String:** JDBC connection string including database name. (Macro-enabled)\n\n**Username:** User identity for connecting to the specified database. Required for databases that need\nauthentication. Optional for databases that do not require authentication. (Macro-enabled)\n\n**Password:** Password to use to connect to the specified database. Required for databases\nthat need authentication. Optional for databases that do not require authentication. (Macro-enabled)\n\n**Connection Arguments:** A list of arbitrary string tag/value pairs as connection arguments. These arguments\nwill be passed to the JDBC driver, as connection arguments, for JDBC drivers that may need additional configurations.\nThis is a semicolon-separated list of key-value pairs, where each pair is separated by a equals '=' and specifies\nthe key and value for the argument. For example, 'key1=value1;key2=value' specifies that the connection will be\ngiven arguments 'key1' mapped to 'value1' and the argument 'key2' mapped to 'value2'. (Macro-enabled)\n\n**Reference Name:** Name used to uniquely identify this sink for lineage, annotating metadata, etc.\n\n**Schema:** The schema of records output by the source. This will be used in place of whatever schema comes\nback from the query. However, it must match the schema that comes back from the query,\nexcept it can mark fields as nullable and can contain a subset of the fields.\n\n**Import Query:** The SELECT query to use to import data from the specified table.\nYou can specify an arbitrary number of columns to import, or import all columns using \\*. The Query should\ncontain the '$CONDITIONS' string. For example, 'SELECT * FROM table WHERE $CONDITIONS'.\nThe '$CONDITIONS' string will be replaced by 'splitBy' field limits specified by the bounding query.\nThe '$CONDITIONS' string is not required if numSplits is set to one. (Macro-enabled)\n\n**Bounding Query:** Bounding Query should return the min and max of the values of the 'splitBy' field.\nFor example, 'SELECT MIN(id),MAX(id) FROM table'. Not required if numSplits is set to one. (Macro-enabled)\n\n**Split-By Field Name:** Field Name which will be used to generate splits. Not required if numSplits is set to one. (Macro-enabled)\n\n**Number of Splits to Generate:** Number of splits to generate. (Macro-enabled)\n\n**Fetch Size:** The number of rows to fetch at a time per split. Larger fetch size can result in faster import,\nwith the tradeoff of higher memory usage.\n\n**Enable Auto-Commit:** Whether to enable auto-commit for queries run by this source. Defaults to 'false'.\nNormally this setting does not matter. It only matters if you are using a jdbc driver -- like the Hive\ndriver -- that will error when the commit operation is run, or a driver that will error when auto-commit is\nset to false. For drivers like those, you will need to set this to 'true'.\n\n**Column Name Case:** Sets the case of the column names returned from the query.\nPossible options are ``upper`` or ``lower``. By default or for any other input, the column names are not modified and\nthe names returned from the database are used as-is. Note that setting this property provides predictability\nof column name cases across different databases but might result in column name conflicts if multiple column\nnames are the same when the case is ignored (optional).\n\n**Transaction Isolation Level:** The transaction isolation level for queries run by this sink.\nDefaults to TRANSACTION_SERIALIZABLE. See java.sql.Connection#setTransactionIsolation for more details.\nThe Phoenix jdbc driver will throw an exception if the Phoenix database does not have transactions enabled\nand this setting is set to true. For drivers like that, this should be set to TRANSACTION_NONE.\n\n**Pattern To Replace:** The pattern to replace in the field name in the table, it is typically used with the\nReplace With config. If Replace With is not set, the pattern will be removed in the field name.\n\n**Replace With:** The string that will be replaced in the field name in the table, it must be used with the\nPattern To Replace config.\n\n\nExample\n-------\nThis example connects to a database using the specified 'connectionString', which means\nit will connect to the 'prod' database of a PostgreSQL instance running on 'localhost'.\nIt will run the 'importQuery' against the 'users' table to read four columns from the table.\nThe column types will be used to derive the record field types output by the source.\n\n```json\n{\n    \"name\": \"Database\",\n    \"type\": \"batchsource\",\n    \"properties\": {\n        \"importQuery\": \"select id,name,email,phone from users where $CONDITIONS\",\n        \"boundingQuery\": \"select min(id),max(id) from users\",\n        \"splitBy\": \"id\",\n        \"connectionString\": \"jdbc:postgresql://localhost:5432/prod\",\n        \"user\": \"user123\",\n        \"password\": \"password-abc\",\n        \"jdbcPluginName\": \"postgres\",\n        \"jdbcPluginType\": \"jdbc\"\n    }\n}\n```\n\nFor example, if the 'id' column is a primary key of type int and the other columns are\nnon-nullable varchars, output records will have this schema:\n\n| field name     | type                |\n| -------------- | ------------------- |\n| id             | int                 |\n| name           | string              |\n| email          | string              |\n| phone          | string              |\n",
    "widgets.DatabaseQuery-postaction": "{\n  \"metadata\": {\"spec-version\": \"1.0\"},\n  \"configuration-groups\": [\n    {\n      \"label\": \"Basic\",\n      \"properties\": [\n        {\n          \"widget-type\": \"select\",\n          \"name\": \"runCondition\",\n          \"label\": \"Run Condition\",\n          \"widget-attributes\": {\n            \"default\": \"success\",\n            \"values\": [\n              \"completion\",\n              \"success\",\n              \"failure\"\n            ]\n          }\n        },\n        {\n          \"widget-type\": \"textbox\",\n          \"name\": \"jdbcPluginName\",\n          \"label\": \"Plugin Name\"\n        },\n        {\n          \"widget-type\": \"textbox\",\n          \"name\": \"jdbcPluginType\",\n          \"label\": \"Plugin Type\",\n          \"widget-attributes\": {\"default\": \"jdbc\"}\n        },\n        {\n          \"widget-type\": \"textbox\",\n          \"name\": \"connectionString\",\n          \"label\": \"Connection String\"\n        },\n        {\n          \"widget-type\": \"textarea\",\n          \"name\": \"query\",\n          \"label\": \"Query\",\n          \"widget-attributes\": {\"rows\": \"4\"}\n        }\n      ]\n    },\n    {\n      \"label\": \"Credentials\",\n      \"properties\": [\n        {\n          \"widget-type\": \"textbox\",\n          \"name\": \"user\",\n          \"label\": \"Username\"\n        },\n        {\n          \"widget-type\": \"password\",\n          \"name\": \"password\",\n          \"label\": \"Password\"\n        }\n      ]\n    },\n    {\n      \"label\": \"Advanced\",\n      \"properties\": [\n        {\n          \"widget-type\": \"keyvalue\",\n          \"name\": \"connectionArguments\",\n          \"label\": \"Connection Arguments\",\n          \"widget-attributes\": {\n            \"kv-delimiter\": \"=\",\n            \"key-placeholder\": \"Key\",\n            \"value-placeholder\": \"Value\",\n            \"delimiter\": \";\",\n            \"showDelimiter\": \"false\"\n          }\n        },\n        {\n          \"widget-type\": \"radio-group\",\n          \"name\": \"enableAutoCommit\",\n          \"label\": \"Enable Auto-Commit\",\n          \"widget-attributes\": {\n            \"layout\": \"inline\",\n            \"default\": \"false\",\n            \"options\": [\n              {\n                \"id\": \"true\",\n                \"label\": \"True\"\n              },\n              {\n                \"id\": \"false\",\n                \"label\": \"False\"\n              }\n            ]\n          }\n        }\n      ]\n    }\n  ]\n}",
    "doc.Database-batchsink": "# Database Batch Sink\n\n\nDescription\n-----------\nWrites records to a database table. Each record will be written to a row in the table.\n\n\nUse Case\n--------\nThis sink is used whenever you need to write to a database table.\nSuppose you periodically build a recommendation model for products on your online store.\nThe model is stored in a FileSet and you want to export the contents\nof the FileSet to a database table where it can be served to your users.\n\n\nProperties\n----------\n**Reference Name:** Name used to uniquely identify this sink for lineage, annotating metadata, etc.\n\n**Use Connection** Whether to use a connection. If a connection is used, you do not need to provide the credentials.\n\n**Connection** Name of the connection to use. Project and service account information will be provided by the connection.\nYou also can use the macro function ${conn(connection-name)}.\n\n**Plugin Name:** Name of the JDBC plugin to use. This is the value of the 'name' key\ndefined in the JSON file for the JDBC plugin. (Macro-enabled)\n\n**Plugin Type:** Type of the JDBC plugin to use. This is the value of the 'type' key\ndefined in the JSON file for the JDBC plugin. Defaults to 'jdbc'.\n\n**Connection String:** JDBC connection string including database name. (Macro-enabled)\n\n**Table Name:** Name of the table to export to. (Macro-enabled)\n\n**Columns:** Comma-separated list of columns in the specified table to export to.\n\n**Username:** User identity for connecting to the specified database. Required for databases that need\nauthentication. Optional for databases that do not require authentication. (Macro-enabled)\n\n**Password:** Password to use to connect to the specified database. Required for databases\nthat need authentication. Optional for databases that do not require authentication. (Macro-enabled)\n\n**Connection Arguments:** A list of arbitrary string tag/value pairs as connection arguments. These arguments\nwill be passed to the JDBC driver, as connection arguments, for JDBC drivers that may need additional configurations.\nThis is a semicolon-separated list of key-value pairs, where each pair is separated by a equals '=' and specifies\nthe key and value for the argument. For example, 'key1=value1;key2=value' specifies that the connection will be\ngiven arguments 'key1' mapped to 'value1' and the argument 'key2' mapped to 'value2'. (Macro-enabled)\n\n**Enable Auto-Commit:** Whether to enable auto-commit for queries run by this sink. Defaults to 'false'.\nNormally this setting does not matter. It only matters if you are using a jdbc driver -- like the Hive\ndriver -- that will error when the commit operation is run, or a driver that will error when auto-commit is\nset to false. For drivers like those, you will need to set this to 'true'.\n\n**Column Name Case:** Sets the case of the column names returned by the column check query.\nPossible options are ``upper`` or ``lower``. By default or for any other input, the column names are not modified and\nthe names returned from the database are used as-is. Note that setting this property provides predictability\nof column name cases across different databases but might result in column name conflicts if multiple column\nnames are the same when the case is ignored (optional).\n\n**Transaction Isolation Level:** The transaction isolation level for queries run by this sink.\nDefaults to TRANSACTION_SERIALIZABLE. See java.sql.Connection#setTransactionIsolation for more details.\nThe Phoenix jdbc driver will throw an exception if the Phoenix database does not have transactions enabled\nand this setting is set to true. For drivers like that, this should be set to TRANSACTION_NONE.\n\nExample\n-------\nThis example connects to a database using the specified 'connectionString', which means\nit will connect to the 'prod' database of a PostgreSQL instance running on 'localhost'.\nEach input record will be written to a row of the 'users' table, with the value for each\ncolumn taken from the value of the field in the record. For example, the 'id' field in\nthe record will be written to the 'id' column of that row.\n\n    {\n        \"name\": \"Database\",\n        \"type\": \"batchsink\",\n        \"properties\": {\n            \"tableName\": \"users\",\n            \"columns\": \"id,name,email,phone\",\n            \"connectionString\": \"jdbc:postgresql://localhost:5432/prod\",\n            \"user\": \"postgres\",\n            \"password\": \"\",\n            \"jdbcPluginName\": \"postgres\",\n            \"jdbcPluginType\": \"jdbc\"\n        }\n    }\n",
    "doc.DatabaseQuery-postaction": "# Database Query Post-run Action\n\n\nDescription\n-----------\nRuns a database query at the end of the pipeline run.\nCan be configured to run only on success, only on failure, or always at the end of the run.\n\n\nUse Case\n--------\nThe action is used whenever you need to run a query at the end of a pipeline run.\nFor example, you may have a pipeline that imports data from a database table to\nhdfs files. At the end of the run, you may want to run a query that deletes the data\nthat was read from the table.\n\n\nProperties\n----------\n**Run Condition:** When to run the action. Must be 'completion', 'success', or 'failure'. Defaults to 'success'.\nIf set to 'completion', the action will be executed regardless of whether the pipeline run succeeded or failed.\nIf set to 'success', the action will only be executed if the pipeline run succeeded.\nIf set to 'failure', the action will only be executed if the pipeline run failed.\n\n**Plugin Name:** Name of the JDBC plugin to use. This is the value of the 'name' key\ndefined in the JSON file for the JDBC plugin.\n\n**Plugin Type:** Type of the JDBC plugin to use. This is the value of the 'type' key\ndefined in the JSON file for the JDBC plugin. Defaults to 'jdbc'.\n\n**Query:** The query to run.\n\n**Connection String:** JDBC connection string including database name.\n\n**Username:** User identity for connecting to the specified database. Required for databases that need\nauthentication. Optional for databases that do not require authentication.\n\n**Password:** Password to use to connect to the specified database. Required for databases\nthat need authentication. Optional for databases that do not require authentication.\n\n**Connection Arguments:** A list of arbitrary string tag/value pairs as connection arguments. These arguments\nwill be passed to the JDBC driver, as connection arguments, for JDBC drivers that may need additional configurations.\nThis is a semicolon-separated list of key-value pairs, where each pair is separated by a equals '=' and specifies\nthe key and value for the argument. For example, 'key1=value1;key2=value' specifies that the connection will be\ngiven arguments 'key1' mapped to 'value1' and the argument 'key2' mapped to 'value2'. (Macro-enabled)\n\n**Enable Auto-Commit:** Whether to enable auto-commit for queries run by this source. Defaults to 'false'.\nNormally this setting does not matter. It only matters if you are using a jdbc driver -- like the Hive\ndriver -- that will error when the commit operation is run, or a driver that will error when auto-commit is\nset to false. For drivers like those, you will need to set this to 'true'.\n\n\nExample\n-------\nThis example connects to a database using the specified 'connectionString', which means\nit will connect to the 'prod' database of a PostgreSQL instance running on 'localhost'.\nIt will run a query to delete the contents of the 'userEvents' table if the pipeline run succeeded.\n\n    {\n        \"name\": \"Database\",\n        \"type\": \"batchsource\",\n        \"properties\": {\n            \"runCondition\": \"success\",\n            \"query\": \"delete * from userEvents\",\n            \"splitBy\": \"id\",\n            \"connectionString\": \"jdbc:postgresql://localhost:5432/prod\",\n            \"user\": \"user123\",\n            \"password\": \"password-abc\",\n            \"jdbcPluginName\": \"postgres\",\n            \"jdbcPluginType\": \"jdbc\"\n        }\n    }\n",
    "widgets.Database-batchsink": "{\n  \"outputs\": [],\n  \"jump-config\": {\"datasets\": [{\"ref-property-name\": \"referenceName\"}]},\n  \"metadata\": {\"spec-version\": \"1.5\"},\n  \"configuration-groups\": [\n    {\n      \"label\": \"Connection\",\n      \"properties\": [\n        {\n          \"widget-type\": \"toggle\",\n          \"name\": \"useConnection\",\n          \"label\": \"Use connection\",\n          \"widget-attributes\": {\n            \"default\": \"false\",\n            \"off\": {\n              \"label\": \"NO\",\n              \"value\": \"false\"\n            },\n            \"on\": {\n              \"label\": \"YES\",\n              \"value\": \"true\"\n            }\n          }\n        },\n        {\n          \"widget-type\": \"connection-select\",\n          \"name\": \"connection\",\n          \"label\": \"Connection\",\n          \"widget-attributes\": {\"connectionType\": \"Database\"}\n        },\n        {\n          \"widget-type\": \"plugin-list\",\n          \"name\": \"jdbcPluginName\",\n          \"label\": \"JDBC Driver name\",\n          \"widget-attributes\": {\"plugin-type\": \"jdbc\"}\n        },\n        {\n          \"widget-type\": \"textbox\",\n          \"name\": \"connectionString\",\n          \"label\": \"Connection String\"\n        },\n        {\n          \"widget-type\": \"textbox\",\n          \"name\": \"user\",\n          \"label\": \"Username\"\n        },\n        {\n          \"widget-type\": \"password\",\n          \"name\": \"password\",\n          \"label\": \"Password\"\n        },\n        {\n          \"widget-type\": \"keyvalue\",\n          \"name\": \"connectionArguments\",\n          \"label\": \"Connection Arguments\",\n          \"widget-attributes\": {\n            \"kv-delimiter\": \"=\",\n            \"key-placeholder\": \"Key\",\n            \"value-placeholder\": \"Value\",\n            \"delimiter\": \";\",\n            \"showDelimiter\": \"false\"\n          }\n        }\n      ]\n    },\n    {\n      \"label\": \"Basic\",\n      \"properties\": [\n        {\n          \"widget-type\": \"textbox\",\n          \"name\": \"referenceName\",\n          \"label\": \"Reference Name\",\n          \"widget-attributes\": {\"placeholder\": \"Name used to identify this sink for lineage\"}\n        },\n        {\n          \"widget-type\": \"hidden\",\n          \"name\": \"jdbcPluginType\",\n          \"label\": \"Plugin Type\",\n          \"widget-attributes\": {\"default\": \"jdbc\"}\n        },\n        {\n          \"widget-type\": \"connection-browser\",\n          \"widget-category\": \"plugin\",\n          \"widget-attributes\": {\n            \"label\": \"Browse Database\",\n            \"connectionType\": \"DATABASE\"\n          }\n        },\n        {\n          \"widget-type\": \"textbox\",\n          \"name\": \"tableName\",\n          \"label\": \"Table Name\"\n        },\n        {\n          \"widget-type\": \"csv\",\n          \"name\": \"columns\",\n          \"label\": \"Columns\",\n          \"widget-attributes\": {\"delimiter\": \",\"}\n        }\n      ]\n    },\n    {\n      \"label\": \"Advanced\",\n      \"properties\": [\n        {\n          \"widget-type\": \"radio-group\",\n          \"name\": \"enableAutoCommit\",\n          \"label\": \"Enable Auto-Commit\",\n          \"widget-attributes\": {\n            \"layout\": \"inline\",\n            \"default\": \"false\",\n            \"options\": [\n              {\n                \"id\": \"true\",\n                \"label\": \"True\"\n              },\n              {\n                \"id\": \"false\",\n                \"label\": \"False\"\n              }\n            ]\n          }\n        },\n        {\n          \"widget-type\": \"select\",\n          \"name\": \"columnNameCase\",\n          \"label\": \"Column Name Case\",\n          \"widget-attributes\": {\n            \"default\": \"No change\",\n            \"values\": [\n              \"UPPER\",\n              \"lower\",\n              \"No change\"\n            ]\n          }\n        },\n        {\n          \"widget-type\": \"select\",\n          \"name\": \"transactionIsolationLevel\",\n          \"label\": \"Transaction Isolation Level\",\n          \"widget-attributes\": {\n            \"default\": \"TRANSACTION_SERIALIZABLE\",\n            \"values\": [\n              \"TRANSACTION_NONE\",\n              \"TRANSACTION_READ_UNCOMMITTED\",\n              \"TRANSACTION_READ_COMMITTED\",\n              \"TRANSACTION_REPEATABLE_READ\",\n              \"TRANSACTION_SERIALIZABLE\"\n            ]\n          }\n        }\n      ]\n    }\n  ],\n  \"display-name\": \"Database\",\n  \"filters\": [\n    {\n      \"condition\": {\"expression\": \"useConnection == false\"},\n      \"name\": \"showConnectionProperties \",\n      \"show\": [\n        {\n          \"name\": \"jdbcPluginName\",\n          \"type\": \"property\"\n        },\n        {\n          \"name\": \"user\",\n          \"type\": \"property\"\n        },\n        {\n          \"name\": \"password\",\n          \"type\": \"property\"\n        },\n        {\n          \"name\": \"connectionString\",\n          \"type\": \"property\"\n        },\n        {\n          \"name\": \"connectionArguments\",\n          \"type\": \"property\"\n        }\n      ]\n    },\n    {\n      \"condition\": {\"expression\": \"useConnection == true\"},\n      \"name\": \"showConnectionId\",\n      \"show\": [{\n        \"name\": \"connection\",\n        \"type\": \"property\"\n      }]\n    }\n  ]\n}",
    "widgets.Database-batchsource": "{\n  \"outputs\": [{\n    \"name\": \"schema\",\n    \"widget-type\": \"schema\",\n    \"widget-attributes\": {\n      \"schema-types\": [\n        \"boolean\",\n        \"int\",\n        \"long\",\n        \"float\",\n        \"double\",\n        \"bytes\",\n        \"string\"\n      ],\n      \"schema-default-type\": \"string\"\n    }\n  }],\n  \"jump-config\": {\"datasets\": [{\"ref-property-name\": \"referenceName\"}]},\n  \"metadata\": {\"spec-version\": \"1.5\"},\n  \"configuration-groups\": [\n    {\n      \"label\": \"Connection\",\n      \"properties\": [\n        {\n          \"widget-type\": \"toggle\",\n          \"name\": \"useConnection\",\n          \"label\": \"Use connection\",\n          \"widget-attributes\": {\n            \"default\": \"false\",\n            \"off\": {\n              \"label\": \"NO\",\n              \"value\": \"false\"\n            },\n            \"on\": {\n              \"label\": \"YES\",\n              \"value\": \"true\"\n            }\n          }\n        },\n        {\n          \"widget-type\": \"connection-select\",\n          \"name\": \"connection\",\n          \"label\": \"Connection\",\n          \"widget-attributes\": {\"connectionType\": \"Database\"}\n        },\n        {\n          \"widget-type\": \"plugin-list\",\n          \"name\": \"jdbcPluginName\",\n          \"label\": \"JDBC Driver name\",\n          \"widget-attributes\": {\"plugin-type\": \"jdbc\"}\n        },\n        {\n          \"widget-type\": \"textbox\",\n          \"name\": \"connectionString\",\n          \"label\": \"Connection String\"\n        },\n        {\n          \"widget-type\": \"textbox\",\n          \"name\": \"user\",\n          \"label\": \"Username\"\n        },\n        {\n          \"widget-type\": \"password\",\n          \"name\": \"password\",\n          \"label\": \"Password\"\n        },\n        {\n          \"widget-type\": \"keyvalue\",\n          \"name\": \"connectionArguments\",\n          \"label\": \"Connection Arguments\",\n          \"widget-attributes\": {\n            \"kv-delimiter\": \"=\",\n            \"key-placeholder\": \"Key\",\n            \"value-placeholder\": \"Value\",\n            \"delimiter\": \";\",\n            \"showDelimiter\": \"false\"\n          }\n        }\n      ]\n    },\n    {\n      \"label\": \"Basic\",\n      \"properties\": [\n        {\n          \"widget-type\": \"textbox\",\n          \"name\": \"referenceName\",\n          \"label\": \"Reference Name\",\n          \"widget-attributes\": {\"placeholder\": \"Name used to identify this source for lineage\"}\n        },\n        {\n          \"widget-type\": \"hidden\",\n          \"name\": \"jdbcPluginType\",\n          \"widget-attributes\": {\"default\": \"jdbc\"}\n        },\n        {\n          \"widget-type\": \"hidden\",\n          \"name\": \"query\"\n        },\n        {\n          \"widget-type\": \"connection-browser\",\n          \"widget-category\": \"plugin\",\n          \"widget-attributes\": {\n            \"label\": \"Browse Database\",\n            \"connectionType\": \"DATABASE\"\n          }\n        },\n        {\n          \"widget-type\": \"get-schema\",\n          \"widget-category\": \"plugin\"\n        },\n        {\n          \"widget-type\": \"textarea\",\n          \"name\": \"importQuery\",\n          \"label\": \"Import Query\",\n          \"widget-attributes\": {\"rows\": \"4\"}\n        },\n        {\n          \"widget-type\": \"textarea\",\n          \"name\": \"boundingQuery\",\n          \"label\": \"Bounding Query\",\n          \"widget-attributes\": {\"rows\": \"4\"}\n        },\n        {\n          \"widget-type\": \"textbox\",\n          \"name\": \"splitBy\",\n          \"label\": \"Split-By Field Name\"\n        },\n        {\n          \"widget-type\": \"textbox\",\n          \"name\": \"numSplits\",\n          \"label\": \"Number of Splits to Generate\",\n          \"widget-attributes\": {\"default\": \"1\"}\n        },\n        {\n          \"widget-type\": \"textbox\",\n          \"name\": \"fetchSize\",\n          \"label\": \"Fetch Size\",\n          \"widget-attributes\": {\"default\": \"1000\"}\n        }\n      ]\n    },\n    {\n      \"label\": \"Advanced\",\n      \"properties\": [\n        {\n          \"widget-type\": \"radio-group\",\n          \"name\": \"enableAutoCommit\",\n          \"label\": \"Enable Auto-Commit\",\n          \"widget-attributes\": {\n            \"layout\": \"inline\",\n            \"default\": \"false\",\n            \"options\": [\n              {\n                \"id\": \"true\",\n                \"label\": \"True\"\n              },\n              {\n                \"id\": \"false\",\n                \"label\": \"False\"\n              }\n            ]\n          }\n        },\n        {\n          \"widget-type\": \"select\",\n          \"name\": \"columnNameCase\",\n          \"label\": \"Column Name Case\",\n          \"widget-attributes\": {\n            \"default\": \"No change\",\n            \"values\": [\n              \"UPPER\",\n              \"lower\",\n              \"No change\"\n            ]\n          }\n        },\n        {\n          \"widget-type\": \"select\",\n          \"name\": \"transactionIsolationLevel\",\n          \"label\": \"Transaction Isolation Level\",\n          \"widget-attributes\": {\n            \"default\": \"TRANSACTION_SERIALIZABLE\",\n            \"values\": [\n              \"TRANSACTION_NONE\",\n              \"TRANSACTION_READ_UNCOMMITTED\",\n              \"TRANSACTION_READ_COMMITTED\",\n              \"TRANSACTION_REPEATABLE_READ\",\n              \"TRANSACTION_SERIALIZABLE\"\n            ]\n          }\n        }\n      ]\n    },\n    {\n      \"label\": \"Column Names Normalization\",\n      \"properties\": [\n        {\n          \"widget-type\": \"textbox\",\n          \"name\": \"patternToReplace\",\n          \"label\": \"Pattern To Replace\"\n        },\n        {\n          \"widget-type\": \"textbox\",\n          \"name\": \"replaceWith\",\n          \"label\": \"Replace With\"\n        }\n      ]\n    }\n  ],\n  \"display-name\": \"Database\",\n  \"filters\": [\n    {\n      \"condition\": {\"expression\": \"useConnection == false\"},\n      \"name\": \"showConnectionProperties \",\n      \"show\": [\n        {\n          \"name\": \"jdbcPluginName\",\n          \"type\": \"property\"\n        },\n        {\n          \"name\": \"user\",\n          \"type\": \"property\"\n        },\n        {\n          \"name\": \"password\",\n          \"type\": \"property\"\n        },\n        {\n          \"name\": \"connectionString\",\n          \"type\": \"property\"\n        },\n        {\n          \"name\": \"connectionArguments\",\n          \"type\": \"property\"\n        }\n      ]\n    },\n    {\n      \"condition\": {\"expression\": \"useConnection == true\"},\n      \"name\": \"showConnectionId\",\n      \"show\": [{\n        \"name\": \"connection\",\n        \"type\": \"property\"\n      }]\n    }\n  ]\n}"
  },
  "parents": [
    "system:cdap-data-pipeline[6.7.1-SNAPSHOT,7.0.0-SNAPSHOT)",
    "system:cdap-data-streams[6.7.1-SNAPSHOT,7.0.0-SNAPSHOT)"
  ]
}